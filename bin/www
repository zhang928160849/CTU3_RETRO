#!/usr/bin/env node
var commentModel = require('../server/models/Comment');
/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('ctu3-retro:server');
var http = require('http');
const db = require('../server/lib/db');
const config = require('../server/config/index');
var WebSocketServer = require("ws").Server;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);
// app.set('host','10.130.226.220');
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server)
/**
 * Listen on provided port, on all network interfaces.
 */

db.connect(config.developement.database.dsn).then(
  ()=>{
    console.log("CONNECT SUCCESSFULLY");
    var wss = new WebSocketServer({
      server: server,
      // server: '10.130.193.247:8080',
      path: "/hereIsWS",
      port:8081
      });

    wss.on("connection", function(ws){
   // ...
      console.log(`ws 已经连接上`);
      ws.on('message', function (message) {


        console.log('zzzz'+message);
        const comment = commentModel.find({'comment':message});
        var commentpromise = comment.exec();
        commentpromise.then(function(resq){

          wss.clients.forEach(
            function(client){
              client.send(`{ 
                "commentD": "${resq[0].commentD}" ,
                "label": "${resq[0].label}",
                "category":"${resq[0].category}"
              }`, (err) => {
                if (err) {
                  console.log(`[SERVER] error: ${err}`);
                }
              });
            }
          )
        })

        // console.log(`收到客户端的数据: ${message}`);

      })
    }); 
    server.listen(port);


  }
).catch(
  (err)=>{
    console.log(err);
  }
);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
